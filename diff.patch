diff --git a/README.md b/README.md
index e0fb3aa..e24ad99 100644
--- a/README.md
+++ b/README.md
@@ -106,7 +106,27 @@ Method | HTTP request | Description
 [**createChallengeType**](docs/ChallengeTypesApi.md#createchallengetype) | **POST** /challengeTypes | Create a challengeType.
 [**getChallengeType**](docs/ChallengeTypesApi.md#getchallengetype) | **GET** /challengeTypes/:challengeTypeId | Get the challengeType.
 [**updateChallengeType**](docs/ChallengeTypesApi.md#updatechallengetype) | **PUT** /challengeTypes/:challengeTypeId | Fully update challengeType.
-[**patchChallengeType**](ChallengeTypesApi.md#patchchallengetype) | **PATCH** /challengeTypes/:challengeTypeId | Partially update challengeType.
+[**patchChallengeType**](docs/ChallengeTypesApi.md#patchchallengetype) | **PATCH** /challengeTypes/:challengeTypeId | Partially update challengeType.
+
+### ChallengeSettings wrapper methods
+
+Method | HTTP request | Description
+------------- | ------------- | -------------
+[**searchChallengeSettings**](docs/ChallengeSettingsApi.md#searchchallengesettings) | **GET** /challengeSettings | Search challengeSettings.
+[**createChallengeSetting**](docs/ChallengeSettingsApi.md#createchallengesetting) | **POST** /challengeSettings | Create a challengeSetting.
+[**getChallengeSetting**](docs/ChallengeSettingsApi.md#getchallengesetting) | **GET** /challengeSettings/:challengeSettingId | Get the challengeSetting.
+[**updateChallengeSetting**](docs/ChallengeSettingsApi.md#updatechallengesetting) | **PUT** /challengeSettings/:challengeSettingId | Fully update challengeSetting.
+
+### ChallengePhases wrapper methods
+
+Method | HTTP request | Description
+------------- | ------------- | -------------
+[**searchChallengePhases**](docs/ChallengePhasesApi.md#searchchallengephases) | **GET** /challengePhases | Search challengePhases.
+[**createChallengePhase**](docs/ChallengePhasesApi.md#createchallengephase) | **POST** /challengePhases | Create a challengePhase.
+[**getChallengePhase**](docs/ChallengePhasesApi.md#getchallengephase) | **GET** /challengePhases/:challengePhaseId | Get the challengePhase.
+[**updateChallengePhase**](docs/ChallengePhasesApi.md#updatechallengephase) | **PUT** /challengePhases/:challengePhaseId | Fully update challengePhase.
+[**patchChallengePhase**](docs/ChallengePhasesApi.md#patchchallengephase) | **PATCH** /challengePhases/:challengePhaseId | Partially update challengePhase.
+[**deleteChallengePhase**](docs/ChallengePhasesApi.md#deletechallengephase) | **DELETE** /challengePhases/:challengePhaseId | Delete challengePhase.
 
 ## Authorization
 
diff --git a/Verification.md b/Verification.md
new file mode 100644
index 0000000..d389d72
--- /dev/null
+++ b/Verification.md
@@ -0,0 +1,19 @@
+#Verification
+
+120 passing (1s)
+
+
+| File                                        | % Stmts    | % Branch   | % Funcs    | % Lines    | Uncovered Line #s   |      |
+| ------------------------------------------- | ---------- | ---------- | ---------- | ---------- | ------------------- | ---- |
+| All files                                   | 97.73      | 91.3       | 100        | 97.73      |                     |      |
+| topcoder-challenge-api-wrapper              | 97.44      | 83.33      | 100        | 97.44      |                     |      |
+| index.js                                    | 97.44      | 83.33      | 100        | 97.44      | 85                  |      |
+| topcoder-challenge-api-wrapper/src          | 100        | 100        | 100        | 100        |                     |      |
+| ChallengePhasesApi.js                       | 100        | 100        | 100        | 100        |                     |      |
+| ChallengeSettingsApi.js                     | 100        | 100        | 100        | 100        |                     |      |
+| ChallengeTypesApi.js                        | 100        | 100        | 100        | 100        |                     |      |
+| ChallengesApi.js                            | 100        | 100        | 100        | 100        |                     |      |
+| topcoder-challenge-api-wrapper/src/common   | 95.12      | 85         | 100        | 95.12      |                     |      |
+| constants.js                                | 100        | 100        | 100        | 100        |                     |      |
+| helper.js                                   | 95         | 85         | 100        | 95         | 105,133             |      |
+
diff --git a/docs/ChallengePhasesApi.md b/docs/ChallengePhasesApi.md
new file mode 100644
index 0000000..2070c27
--- /dev/null
+++ b/docs/ChallengePhasesApi.md
@@ -0,0 +1,438 @@
+# ChallengePhases Api
+
+All URIs are relative to **CHALLENGE_API_URL** configuration variable.
+
+Method | HTTP request | Description
+------------- | ------------- | -------------
+[**searchChallengePhases**](#searchchallengephases) | **GET** /challengePhases | Search challengePhases.
+[**createChallengePhase**](#createchallengephase) | **POST** /challengePhases | Create a challengePhase.
+[**getChallengePhase**](#getchallengephase) | **GET** /challengePhases/:challengePhaseId | Get the challengePhase.
+[**updateChallengePhase**](#updatechallengephase) | **PUT** /challengePhases/:challengePhaseId | Fully update challengePhase.
+[**patchChallengePhase**](#patchchallengephase) | **PATCH** /challengePhases/:challengePhaseId | Partially update challengePhase.
+[**deleteChallengePhase**](#deletechallengephase) | **DELETE** /challengePhases/:challengePhaseId | Delete challengePhase.
+
+<a name="searchChallengePhases"></a>
+
+# **searchChallengePhases**
+> searchChallengePhases(reqQuery[, jwt])
+
+Search challengePhases. Link headers are sent back and they have rel set to prev, next, first, last and contain the relevant URL.
+
+### Example
+```javascript
+const challengeApi = require('topcoder-challenge-api-wrapper')
+const challengeApiM2MClient = challengeApi(_.pick(config,
+      ['AUTH0_URL', 'AUTH0_AUDIENCE', 'TOKEN_CACHE_TIME',
+        'AUTH0_CLIENT_ID', 'AUTH0_CLIENT_SECRET', 'CHALLENGE_API_URL',
+        'AUTH0_PROXY_SERVER_URL']))
+
+const challengeApiUserCredentialsClient = challengeApi(_.pick(config,
+      ['USERNAME', 'PASSWORD', 'TC_AUTHN_URL', 'TC_AUTHZ_URL', 'TC_CLIENT_ID',
+       'TC_CLIENT_V2CONNECTION', 'CHALLENGE_API_URL']))
+
+const challengeApiJwtMethodArgClient = challengeApi(_.pick(config,
+      ['CHALLENGE_API_URL']))
+
+const reqQuery = {
+  page: 1,
+  perPage: 10,
+  name: 'Code'
+}
+
+
+// Promise model
+challengeApiM2MClient
+  .searchChallengePhases(reqQuery)
+  .then(result => console.log(result.body, result.status))
+  .catch(err => console.log(err))
+
+challengeApiUserCredentialsClient
+  .searchChallengePhases(reqQuery)
+  .then(result => console.log(result.body, result.status))
+  .catch(err => console.log(err))
+
+
+challengeApiJwtMethodArgClient
+  .searchChallengePhases(reqQuery, config.JWT)
+  .then(result => console.log(result.body, result.status))
+  .catch(err => console.log(err))
+
+// Async / await model
+await challengeApiM2MClient.searchChallengePhases(reqQuery)
+
+await challengeApiUserCredentialsClient.searchChallengePhases(reqQuery)
+
+await challengeApiJwtMethodArgClient.searchChallengePhases(reqQuery, config.JWT)
+```
+
+### Parameters
+
+Name | Phase | Description
+------------- | ------------- | -------------
+ **reqQuery** | [**SearchChallengePhasesCriteria**](SearchChallengePhasesCriteria.md)| the search challengePhases criteria
+ **jwt**      | String | the optional json web token
+
+### Return type
+
+Array of [**Phase**](Phase.md)
+
+### Authorization
+
+[Bearer](../README.md#authorization)
+
+### HTTP request headers
+
+ - **Content-Phase**: application/json
+ - **Accept**: application/json
+
+<a name="createChallengePhase"></a>
+
+# **createChallengePhase**
+> createChallengePhase(reqBody[, jwt])
+
+Create a challengePhase.
+
+### Example
+```javascript
+const challengeApi = require('topcoder-challenge-api-wrapper')
+const challengeApiM2MClient = challengeApi(_.pick(config,
+      ['AUTH0_URL', 'AUTH0_AUDIENCE', 'TOKEN_CACHE_TIME',
+        'AUTH0_CLIENT_ID', 'AUTH0_CLIENT_SECRET', 'CHALLENGE_API_URL',
+        'AUTH0_PROXY_SERVER_URL']))
+
+const challengeApiUserCredentialsClient = challengeApi(_.pick(config,
+      ['USERNAME', 'PASSWORD', 'TC_AUTHN_URL', 'TC_AUTHZ_URL', 'TC_CLIENT_ID',
+       'TC_CLIENT_V2CONNECTION', 'CHALLENGE_API_URL']))
+
+const challengeApiJwtMethodArgClient = challengeApi(_.pick(config, 'CHALLENGE_API_URL'))
+
+const reqBody = {
+  name: 'new-PHASE-2',
+  description: 'add-description-in-put',
+  predecessor: 'af0d5b28-1133-48da-a337-5f3e8340f052',
+  isActive: true,
+  duration: 2000000
+}
+
+
+// Promise model
+challengeApiM2MClient
+  .createChallengePhase(reqBody)
+  .then(result => console.log(result.body, result.status))
+  .catch(err => console.log(err))
+
+challengeApiUserCredentialsClient
+  .createChallengePhase(reqBody)
+  .then(result => console.log(result.body, result.status))
+  .catch(err => console.log(err))
+
+challengeApiJwtMethodArgClient
+  .createChallengePhase(reqBody, config.JWT)
+  .then(result => console.log(result.body, result.status))
+  .catch(err => console.log(err))
+
+// Async / await model
+await challengeApiM2MClient.createChallengePhase(reqBody)
+
+await challengeApiUserCredentialsClient.createChallengePhase(reqBody)
+
+await challengeApiJwtMethodArgClient.createChallengePhase(reqBody, config.JWT)
+```
+
+### Parameters
+
+Name | Phase | Description
+------------- | ------------- | -------------
+ **reqBody** | [**PhaseData**](PhaseData.md) | the challengePhase data
+ **jwt**      | String | the optional json web token
+
+### Return type
+
+[**Phase**](Phase.md)
+
+### Authorization
+
+[Bearer](../README.md#authorization)
+
+### HTTP request headers
+
+ - **Content-Phase**: application/json
+ - **Accept**: application/json
+
+<a name="getChallengePhase"></a>
+
+# **getChallengePhase**
+> getChallengePhase(challengePhaseId[, jwt])
+
+Get the challengePhase by id.
+
+### Example
+```javascript
+const challengeApi = require('topcoder-challenge-api-wrapper')
+const challengeApiM2MClient = challengeApi(_.pick(config,
+      ['AUTH0_URL', 'AUTH0_AUDIENCE', 'TOKEN_CACHE_TIME',
+        'AUTH0_CLIENT_ID', 'AUTH0_CLIENT_SECRET', 'CHALLENGE_API_URL',
+        'AUTH0_PROXY_SERVER_URL']))
+
+const challengeApiUserCredentialsClient = challengeApi(_.pick(config,
+      ['USERNAME', 'PASSWORD', 'TC_AUTHN_URL', 'TC_AUTHZ_URL', 'TC_CLIENT_ID',
+       'TC_CLIENT_V2CONNECTION', 'CHALLENGE_API_URL']))
+
+const challengeApiJwtMethodArgClient = challengeApi(_.pick(config, 'CHALLENGE_API_URL'))
+
+const challengePhaseId = '8f4e8b6a-0ad2-4ff6-ab19-afeb102ff3b4'
+
+// Promise model
+challengeApiM2MClient
+  .getChallengePhase(challengePhaseId)
+  .then(result => console.log(result.body, result.status))
+  .catch(err => console.log(err))
+
+challengeApiUserCredentialsClient
+  .getChallengePhase(challengePhaseId)
+  .then(result => console.log(result.body, result.status))
+  .catch(err => console.log(err))
+
+challengeApiJwtMethodArgClient
+  .getChallengePhase(challengePhaseId, config.JWT)
+  .then(result => console.log(result.body, result.status))
+  .catch(err => console.log(err))
+
+// Async / await model
+await challengeApiM2MClient.getChallengePhase(challengePhaseId)
+
+await challengeApiUserCredentialsClient.getChallengePhase(challengePhaseId)
+
+await challengeApiJwtMethodArgClient.getChallengePhase(challengePhaseId, config.JWT)
+```
+### Parameters
+
+Name | Phase | Description
+------------- | ------------- | -------------
+ **challengePhaseId** | String | the challengePhase id
+ **jwt**      | String | the optional json web token
+
+### Return type
+
+[**Phase**](Phase.md)
+
+### Authorization
+
+[Bearer](../README.md#authorization)
+
+### HTTP request headers
+
+ - **Content-Phase**: application/json
+ - **Accept**: application/json
+
+<a name="updateChallengePhase"></a>
+# **updateChallengePhase**
+> updateChallengePhase(challengePhaseId, reqBody[, jwt])
+
+Fully update challengePhase.
+
+### Example
+```javascript
+const challengeApi = require('topcoder-challenge-api-wrapper')
+const challengeApiM2MClient = challengeApi(_.pick(config,
+      ['AUTH0_URL', 'AUTH0_AUDIENCE', 'TOKEN_CACHE_TIME',
+        'AUTH0_CLIENT_ID', 'AUTH0_CLIENT_SECRET', 'CHALLENGE_API_URL',
+        'AUTH0_PROXY_SERVER_URL']))
+
+const challengeApiUserCredentialsClient = challengeApi(_.pick(config,
+      ['USERNAME', 'PASSWORD', 'TC_AUTHN_URL', 'TC_AUTHZ_URL', 'TC_CLIENT_ID',
+       'TC_CLIENT_V2_CONNECTION', 'CHALLENGE_API_URL']))
+
+const challengeApiJwtMethodArg = challengeApi(_.pick(config, 'CHALLENGE_API_URL'))
+
+const challengePhaseId = '8f4e8b6a-0ad2-4ff6-ab19-afeb102ff3b4'
+const reqBody = {
+  name: 'new-PHASE-1',
+  description: 'add-description-in-put',
+  predecessor: 'af0d5b28-1133-48da-a337-5f3e8340f052',
+  isActive: false,
+  duration: 2000000
+}
+
+
+// Promise model
+challengeApiM2MClient
+  .updateChallengePhase(challengePhaseId, reqBody)
+  .then(result => console.log(result.body, result.status))
+  .catch(err => console.log(err))
+
+challengeApiUserCredentialsClient
+  .updateChallengePhase(challengePhaseId, reqBody)
+  .then(result => console.log(result.body, result.status))
+  .catch(err => console.log(err))
+
+challengeApiJwtMethodArgClient
+  .updateChallengePhase(challengePhaseId, reqBody, config.JWT)
+  .then(result => console.log(result.body, result.status))
+  .catch(err => console.log(err))
+
+// Async / await model
+await challengeApiM2MClient.updateChallengePhase(challengePhaseId, reqBody)
+
+await challengeApiUserCredentialsClient.updateChallengePhase(challengePhaseId, reqBody)
+
+await challengeApiJwtMethodArgClient.updateChallengePhase(challengePhaseId, reqBody, config.JWT)
+```
+
+### Parameters
+
+Name | Phase | Description
+------------- | ------------- | -------------
+ **challengePhaseId** | String | the challengePhase id
+ **reqBody** | [**PhaseData**](PhaseData.md) | the challengePhase data
+ **jwt**      | String | the optional json web token
+
+### Return type
+
+[**Phase**](Phase.md)
+
+### Authorization
+
+[Bearer](../README.md#authorization)
+
+### HTTP request headers
+
+ - **Content-Phase**: application/json
+ - **Accept**: application/json
+
+<a name="patchChallengePhase"></a>
+# **patchChallengePhase**
+> patchChallengePhase(challengePhaseId, reqBody[, jwt])
+
+Partially update challengePhase.
+
+### Example
+```javascript
+const challengeApi = require('topcoder-challenge-api-wrapper')
+const challengeApiM2MClient = challengeApi(_.pick(config,
+      ['AUTH0_URL', 'AUTH0_AUDIENCE', 'TOKEN_CACHE_TIME',
+        'AUTH0_CLIENT_ID', 'AUTH0_CLIENT_SECRET', 'CHALLENGE_API_URL',
+        'AUTH0_PROXY_SERVER_URL']))
+
+const challengeApiUserCredentialsClient = challengeApi(_.pick(config,
+      ['USERNAME', 'PASSWORD', 'TC_AUTHN_URL', 'TC_AUTHZ_URL', 'TC_CLIENT_ID',
+       'TC_CLIENT_V2_CONNECTION', 'CHALLENGE_API_URL']))
+
+const challengeApiJwtMethodArg = challengeApi(_.pick(config, 'CHALLENGE_API_URL'))
+
+const challengePhaseId = '8f4e8b6a-0ad2-4ff6-ab19-afeb102ff3b4'
+const reqBody = {
+  name: 'new-PHASE-3'
+}
+
+
+// Promise model
+challengeApiM2MClient
+  .patchChallengePhase(challengePhaseId, reqBody)
+  .then(result => console.log(result.body, result.status))
+  .catch(err => console.log(err))
+
+challengeApiUserCredentialsClient
+  .patchChallengePhase(challengePhaseId, reqBody)
+  .then(result => console.log(result.body, result.status))
+  .catch(err => console.log(err))
+
+challengeApiJwtMethodArgClient
+  .patchChallengePhase(challengePhaseId, reqBody, config.JWT)
+  .then(result => console.log(result.body, result.status))
+  .catch(err => console.log(err))
+
+// Async / await model
+await challengeApiM2MClient.patchChallengePhase(challengePhaseId, reqBody)
+
+await challengeApiUserCredentialsClient.patchChallengePhase(challengePhaseId, reqBody)
+
+await challengeApiJwtMethodArgClient.patchChallengePhase(challengePhaseId, reqBody, config.JWT)
+```
+
+### Parameters
+
+Name | Phase | Description
+------------- | ------------- | -------------
+ **challengePhaseId** | String | the challengePhase id
+ **reqBody** | [**PhaseData**](PhaseData.md) | the challengePhase data
+ **jwt**      | String | the optional json web token
+
+### Return type
+
+[**Phase**](Phase.md)
+
+### Authorization
+
+[Bearer](../README.md#authorization)
+
+### HTTP request headers
+
+ - **Content-Phase**: application/json
+ - **Accept**: application/json
+
+<a name="deleteChallengePhase"></a>
+# **deleteChallengePhase**
+> deleteChallengePhase(challengePhaseId[, jwt])
+
+Delete challengePhase.
+
+### Example
+```javascript
+const challengeApi = require('topcoder-challenge-api-wrapper')
+const challengeApiM2MClient = challengeApi(_.pick(config,
+      ['AUTH0_URL', 'AUTH0_AUDIENCE', 'TOKEN_CACHE_TIME',
+        'AUTH0_CLIENT_ID', 'AUTH0_CLIENT_SECRET', 'CHALLENGE_API_URL',
+        'AUTH0_PROXY_SERVER_URL']))
+
+const challengeApiUserCredentialsClient = challengeApi(_.pick(config,
+      ['USERNAME', 'PASSWORD', 'TC_AUTHN_URL', 'TC_AUTHZ_URL', 'TC_CLIENT_ID',
+       'TC_CLIENT_V2_CONNECTION', 'CHALLENGE_API_URL']))
+
+const challengeApiJwtMethodArg = challengeApi(_.pick(config, 'CHALLENGE_API_URL'))
+
+const challengePhaseId = '8f4e8b6a-0ad2-4ff6-ab19-afeb102ff3b4'
+
+// Promise model
+challengeApiM2MClient
+  .deleteChallengePhase(challengePhaseId)
+  .then(result => console.log(result.body, result.status))
+  .catch(err => console.log(err))
+
+challengeApiUserCredentialsClient
+  .deleteChallengePhase(challengePhaseId)
+  .then(result => console.log(result.body, result.status))
+  .catch(err => console.log(err))
+
+challengeApiJwtMethodArgClient
+  .deleteChallengePhase(challengePhaseId, config.JWT)
+  .then(result => console.log(result.body, result.status))
+  .catch(err => console.log(err))
+
+// Async / await model
+await challengeApiM2MClient.deleteChallengePhase(challengePhaseId)
+
+await challengeApiUserCredentialsClient.deleteChallengePhase(challengePhaseId)
+
+await challengeApiJwtMethodArgClient.deleteChallengePhase(challengePhaseId, config.JWT)
+```
+
+### Parameters
+
+Name | Phase | Description
+------------- | ------------- | -------------
+ **challengePhaseId** | String | the challengePhase id
+ **jwt**      | String | the optional json web token
+
+### Return type
+
+[**Phase**](Phase.md)
+
+### Authorization
+
+[Bearer](../README.md#authorization)
+
+### HTTP request headers
+
+ - **Content-Phase**: application/json
+ - **Accept**: application/json
diff --git a/docs/ChallengeSettings.md b/docs/ChallengeSettings.md
new file mode 100644
index 0000000..0c6c3a6
--- /dev/null
+++ b/docs/ChallengeSettings.md
@@ -0,0 +1,8 @@
+# ChallengeSettingData
+
+## Properties
+
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**id** | **string** | The challenge setting id |
+**name** | **string** | The challenge setting name |
diff --git a/docs/ChallengeSettingsApi.md b/docs/ChallengeSettingsApi.md
new file mode 100644
index 0000000..b49ec56
--- /dev/null
+++ b/docs/ChallengeSettingsApi.md
@@ -0,0 +1,291 @@
+# ChallengeSettings Api
+
+All URIs are relative to **CHALLENGE_API_URL** configuration variable.
+
+Method | HTTP request | Description
+------------- | ------------- | -------------
+[**searchChallengeSettings**](#searchchallengesettings) | **GET** /challengeSettings | Search challengeSettings.
+[**createChallengeSetting**](#createchallengesetting) | **POST** /challengeSettings | Create a challengeSetting.
+[**getChallengeSetting**](#getchallengesetting) | **GET** /challengeSettings/:challengeSettingId | Get the challengeSetting.
+[**updateChallengeSetting**](#updatechallengesetting) | **PUT** /challengeSettings/:challengeSettingId | Fully update challengeSetting.
+
+<a name="searchChallengeSettings"></a>
+
+# **searchChallengeSettings**
+> searchChallengeSettings(reqQuery[, jwt])
+
+Search challengeSettings. Link headers are sent back and they have rel set to prev, next, first, last and contain the relevant URL.
+
+### Example
+```javascript
+const challengeApi = require('topcoder-challenge-api-wrapper')
+const challengeApiM2MClient = challengeApi(_.pick(config,
+      ['AUTH0_URL', 'AUTH0_AUDIENCE', 'TOKEN_CACHE_TIME',
+        'AUTH0_CLIENT_ID', 'AUTH0_CLIENT_SECRET', 'CHALLENGE_API_URL',
+        'AUTH0_PROXY_SERVER_URL']))
+
+const challengeApiUserCredentialsClient = challengeApi(_.pick(config,
+      ['USERNAME', 'PASSWORD', 'TC_AUTHN_URL', 'TC_AUTHZ_URL', 'TC_CLIENT_ID',
+       'TC_CLIENT_V2CONNECTION', 'CHALLENGE_API_URL']))
+
+const challengeApiJwtMethodArgClient = challengeApi(_.pick(config,
+      ['CHALLENGE_API_URL']))
+
+const reqQuery = {
+  page: 1,
+  perPage: 10,
+  name: 'Code'
+}
+
+
+// Promise model
+challengeApiM2MClient
+  .searchChallengeSettings(reqQuery)
+  .then(result => console.log(result.body, result.status))
+  .catch(err => console.log(err))
+
+challengeApiUserCredentialsClient
+  .searchChallengeSettings(reqQuery)
+  .then(result => console.log(result.body, result.status))
+  .catch(err => console.log(err))
+
+
+challengeApiJwtMethodArgClient
+  .searchChallengeSettings(reqQuery, config.JWT)
+  .then(result => console.log(result.body, result.status))
+  .catch(err => console.log(err))
+
+// Async / await model
+await challengeApiM2MClient.searchChallengeSettings(reqQuery)
+
+await challengeApiUserCredentialsClient.searchChallengeSettings(reqQuery)
+
+await challengeApiJwtMethodArgClient.searchChallengeSettings(reqQuery, config.JWT)
+```
+
+### Parameters
+
+Name | Setting | Description
+------------- | ------------- | -------------
+ **reqQuery** | [**SearchChallengeSettingsCriteria**](SearchChallengeSettingsCriteria.md)| the search challengeSettings criteria
+ **jwt**      | String | the optional json web token
+
+### Return type
+
+Array of [**ChallengeSettings**](ChallengeSettings.md)
+
+### Authorization
+
+[Bearer](../README.md#authorization)
+
+### HTTP request headers
+
+ - **Content-Setting**: application/json
+ - **Accept**: application/json
+
+<a name="createChallengeSetting"></a>
+
+# **createChallengeSetting**
+> createChallengeSetting(reqBody[, jwt])
+
+Create a challengeSetting.
+
+### Example
+```javascript
+const challengeApi = require('topcoder-challenge-api-wrapper')
+const challengeApiM2MClient = challengeApi(_.pick(config,
+      ['AUTH0_URL', 'AUTH0_AUDIENCE', 'TOKEN_CACHE_TIME',
+        'AUTH0_CLIENT_ID', 'AUTH0_CLIENT_SECRET', 'CHALLENGE_API_URL',
+        'AUTH0_PROXY_SERVER_URL']))
+
+const challengeApiUserCredentialsClient = challengeApi(_.pick(config,
+      ['USERNAME', 'PASSWORD', 'TC_AUTHN_URL', 'TC_AUTHZ_URL', 'TC_CLIENT_ID',
+       'TC_CLIENT_V2CONNECTION', 'CHALLENGE_API_URL']))
+
+const challengeApiJwtMethodArgClient = challengeApi(_.pick(config, 'CHALLENGE_API_URL'))
+
+const reqBody = {
+  name: 'Code'
+}
+
+
+// Promise model
+challengeApiM2MClient
+  .createChallengeSetting(reqBody)
+  .then(result => console.log(result.body, result.status))
+  .catch(err => console.log(err))
+
+challengeApiUserCredentialsClient
+  .createChallengeSetting(reqBody)
+  .then(result => console.log(result.body, result.status))
+  .catch(err => console.log(err))
+
+challengeApiJwtMethodArgClient
+  .createChallengeSetting(reqBody, config.JWT)
+  .then(result => console.log(result.body, result.status))
+  .catch(err => console.log(err))
+
+// Async / await model
+await challengeApiM2MClient.createChallengeSetting(reqBody)
+
+await challengeApiUserCredentialsClient.createChallengeSetting(reqBody)
+
+await challengeApiJwtMethodArgClient.createChallengeSetting(reqBody, config.JWT)
+```
+
+### Parameters
+
+Name | Setting | Description
+------------- | ------------- | -------------
+ **reqBody** | [**ChallengeSettingsData**](ChallengeSettingsData.md) | the challengeSetting data
+ **jwt**      | String | the optional json web token
+
+### Return type
+
+[**ChallengeSettings**](ChallengeSettings.md)
+
+### Authorization
+
+[Bearer](../README.md#authorization)
+
+### HTTP request headers
+
+ - **Content-Setting**: application/json
+ - **Accept**: application/json
+
+<a name="getChallengeSetting"></a>
+
+# **getChallengeSetting**
+> getChallengeSetting(challengeSettingId[, jwt])
+
+Get the challengeSetting by id.
+
+### Example
+```javascript
+const challengeApi = require('topcoder-challenge-api-wrapper')
+const challengeApiM2MClient = challengeApi(_.pick(config,
+      ['AUTH0_URL', 'AUTH0_AUDIENCE', 'TOKEN_CACHE_TIME',
+        'AUTH0_CLIENT_ID', 'AUTH0_CLIENT_SECRET', 'CHALLENGE_API_URL',
+        'AUTH0_PROXY_SERVER_URL']))
+
+const challengeApiUserCredentialsClient = challengeApi(_.pick(config,
+      ['USERNAME', 'PASSWORD', 'TC_AUTHN_URL', 'TC_AUTHZ_URL', 'TC_CLIENT_ID',
+       'TC_CLIENT_V2CONNECTION', 'CHALLENGE_API_URL']))
+
+const challengeApiJwtMethodArgClient = challengeApi(_.pick(config, 'CHALLENGE_API_URL'))
+
+const challengeSettingId = '8f4e8b6a-0ad2-4ff6-ab19-afeb102ff3b4'
+
+// Promise model
+challengeApiM2MClient
+  .getChallengeSetting(challengeSettingId)
+  .then(result => console.log(result.body, result.status))
+  .catch(err => console.log(err))
+
+challengeApiUserCredentialsClient
+  .getChallengeSetting(challengeSettingId)
+  .then(result => console.log(result.body, result.status))
+  .catch(err => console.log(err))
+
+challengeApiJwtMethodArgClient
+  .getChallengeSetting(challengeSettingId, config.JWT)
+  .then(result => console.log(result.body, result.status))
+  .catch(err => console.log(err))
+
+// Async / await model
+await challengeApiM2MClient.getChallengeSetting(challengeSettingId)
+
+await challengeApiUserCredentialsClient.getChallengeSetting(challengeSettingId)
+
+await challengeApiJwtMethodArgClient.getChallengeSetting(challengeSettingId, config.JWT)
+```
+### Parameters
+
+Name | Setting | Description
+------------- | ------------- | -------------
+ **challengeSettingId** | String | the challengeSetting id
+ **jwt**      | String | the optional json web token
+
+### Return type
+
+[**ChallengeSettings**](ChallengeSettings.md)
+
+### Authorization
+
+[Bearer](../README.md#authorization)
+
+### HTTP request headers
+
+ - **Content-Setting**: application/json
+ - **Accept**: application/json
+
+<a name="updateChallengeSetting"></a>
+# **updateChallengeSetting**
+> updateChallengeSetting(challengeSettingId, reqBody[, jwt])
+
+Fully update challengeSetting.
+
+### Example
+```javascript
+const challengeApi = require('topcoder-challenge-api-wrapper')
+const challengeApiM2MClient = challengeApi(_.pick(config,
+      ['AUTH0_URL', 'AUTH0_AUDIENCE', 'TOKEN_CACHE_TIME',
+        'AUTH0_CLIENT_ID', 'AUTH0_CLIENT_SECRET', 'CHALLENGE_API_URL',
+        'AUTH0_PROXY_SERVER_URL']))
+
+const challengeApiUserCredentialsClient = challengeApi(_.pick(config,
+      ['USERNAME', 'PASSWORD', 'TC_AUTHN_URL', 'TC_AUTHZ_URL', 'TC_CLIENT_ID',
+       'TC_CLIENT_V2_CONNECTION', 'CHALLENGE_API_URL']))
+
+const challengeApiJwtMethodArg = challengeApi(_.pick(config, 'CHALLENGE_API_URL'))
+
+const challengeSettingId = '8f4e8b6a-0ad2-4ff6-ab19-afeb102ff3b4'
+const reqBody = {
+  name: 'F2F'
+}
+
+
+// Promise model
+challengeApiM2MClient
+  .updateChallengeSetting(challengeSettingId, reqBody)
+  .then(result => console.log(result.body, result.status))
+  .catch(err => console.log(err))
+
+challengeApiUserCredentialsClient
+  .updateChallengeSetting(challengeSettingId, reqBody)
+  .then(result => console.log(result.body, result.status))
+  .catch(err => console.log(err))
+
+challengeApiJwtMethodArgClient
+  .updateChallengeSetting(challengeSettingId, reqBody, config.JWT)
+  .then(result => console.log(result.body, result.status))
+  .catch(err => console.log(err))
+
+// Async / await model
+await challengeApiM2MClient.updateChallengeSetting(challengeSettingId, reqBody)
+
+await challengeApiUserCredentialsClient.updateChallengeSetting(challengeSettingId, reqBody)
+
+await challengeApiJwtMethodArgClient.updateChallengeSetting(challengeSettingId, reqBody, config.JWT)
+```
+
+### Parameters
+
+Name | Setting | Description
+------------- | ------------- | -------------
+ **challengeSettingId** | String | the challengeSetting id
+ **reqBody** | [**ChallengeSettingsData**](ChallengeSettingsData.md) | the challengeSetting data
+ **jwt**      | String | the optional json web token
+
+### Return type
+
+[**ChallengeSettings**](ChallengeSettings.md)
+
+### Authorization
+
+[Bearer](../README.md#authorization)
+
+### HTTP request headers
+
+ - **Content-Setting**: application/json
+ - **Accept**: application/json
diff --git a/docs/ChallengeSettingsData.md b/docs/ChallengeSettingsData.md
new file mode 100644
index 0000000..261aad3
--- /dev/null
+++ b/docs/ChallengeSettingsData.md
@@ -0,0 +1,7 @@
+# ChallengeSettingBody
+
+## Properties
+
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**name** | **string** | The challenge setting name |
diff --git a/docs/SearchChallengePhasesCriteria.md b/docs/SearchChallengePhasesCriteria.md
new file mode 100644
index 0000000..c299b31
--- /dev/null
+++ b/docs/SearchChallengePhasesCriteria.md
@@ -0,0 +1,9 @@
+# SearchChallengePhasesCriteria
+
+## Properties
+
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**page** | **integer** | The page number. | default value is 1
+**perPage** | **integer** | The number of items to list per page. | default value is 20
+**name** | **string** | Filter by name, case-insensitive, partial matches are allowed. |
diff --git a/docs/SearchChallengeSettingsCriteria.md b/docs/SearchChallengeSettingsCriteria.md
new file mode 100644
index 0000000..2c95136
--- /dev/null
+++ b/docs/SearchChallengeSettingsCriteria.md
@@ -0,0 +1,9 @@
+# SearchChallengeSettingsCriteria
+
+## Properties
+
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**page** | **integer** | The page number. | default value is 1
+**perPage** | **integer** | The number of items to list per page. | default value is 20
+**name** | **string** | Filter by name, case-insensitive, partial matches are allowed. |
diff --git a/index.js b/index.js
index 070c943..97d8277 100644
--- a/index.js
+++ b/index.js
@@ -128,6 +128,48 @@ module.exports = (allConfig) => {
     // Partially update challengeType
     patchChallengeType: (challengeTypeId, reqBody, jwt) => {
       return require('./src/ChallengeTypesApi').patchChallengeType(config, challengeTypeId, reqBody, jwt)
+    },
+    // -- challengeSetting APIs --
+    // Search challengeSettings
+    searchChallengeSettings: (reqQuery, jwt) => {
+      return require('./src/ChallengeSettingsApi').searchChallengeSettings(config, reqQuery, jwt)
+    },
+    // Create challengeSetting
+    createChallengeSetting: (reqFormData, jwt) => {
+      return require('./src/ChallengeSettingsApi').createChallengeSetting(config, reqFormData, jwt)
+    },
+    // Get challengeSetting
+    getChallengeSetting: (challengeSettingId, jwt) => {
+      return require('./src/ChallengeSettingsApi').getChallengeSetting(config, challengeSettingId, jwt)
+    },
+    // Fully update challengeSetting
+    updateChallengeSetting: (challengeSettingId, reqBody, jwt) => {
+      return require('./src/ChallengeSettingsApi').updateChallengeSetting(config, challengeSettingId, reqBody, jwt)
+    },
+    // -- challengePhase APIs --
+    // Search challengePhases
+    searchChallengePhases: (reqQuery, jwt) => {
+      return require('./src/ChallengePhasesApi').searchChallengePhases(config, reqQuery, jwt)
+    },
+    // Create challengePhase
+    createChallengePhase: (reqFormData, jwt) => {
+      return require('./src/ChallengePhasesApi').createChallengePhase(config, reqFormData, jwt)
+    },
+    // Get challengePhase
+    getChallengePhase: (challengePhaseId, jwt) => {
+      return require('./src/ChallengePhasesApi').getChallengePhase(config, challengePhaseId, jwt)
+    },
+    // Fully update challengePhase
+    updateChallengePhase: (challengePhaseId, reqBody, jwt) => {
+      return require('./src/ChallengePhasesApi').updateChallengePhase(config, challengePhaseId, reqBody, jwt)
+    },
+    // Partially update challengePhase
+    patchChallengePhase: (challengePhaseId, reqBody, jwt) => {
+      return require('./src/ChallengePhasesApi').patchChallengePhase(config, challengePhaseId, reqBody, jwt)
+    },
+    // Get challengePhase
+    deleteChallengePhase: (challengePhaseId, jwt) => {
+      return require('./src/ChallengePhasesApi').deleteChallengePhase(config, challengePhaseId, jwt)
     }
   }
 }
diff --git a/src/ChallengePhasesApi.js b/src/ChallengePhasesApi.js
new file mode 100644
index 0000000..9f705dd
--- /dev/null
+++ b/src/ChallengePhasesApi.js
@@ -0,0 +1,83 @@
+/*
+ * Wrapper function for ChallengePhase related endpoints
+ */
+
+const helper = require('./common/helper')
+
+/**
+ * Function to search challengePhases with pagination and filter
+ * @param {Object} config Configuration object
+ * @param {Object} reqQuery the query object
+ * @param {String} jwt The JWT to authenticate the request
+ * @returns {Promise} searched challengePhases
+ */
+const searchChallengePhases = (config, reqQuery, jwt = null) => {
+  const url = helper.buildURLwithParams(`${config.CHALLENGE_API_URL}/challengePhases`, reqQuery)
+  return helper.reqToV5API(config, jwt, 'GET', url)
+}
+
+/**
+ * Function to create the challengePhase.
+ * @param {Object} config Configuration object
+ * @param {Object} reqBody the request body object
+ * @param {String} jwt The JWT to authenticate the request
+ * @returns {Promise} created challengePhase
+ */
+const createChallengePhase = (config, reqBody, jwt = null) => {
+  return helper.reqToV5API(config, jwt, 'POST', `${config.CHALLENGE_API_URL}/challengePhases`, reqBody)
+}
+
+/**
+ * Function to get the challengePhase by id.
+ * @param {Object} config Configuration object
+ * @param {String} challengePhaseId the challengePhase id
+ * @param {String} jwt The JWT to authenticate the request
+ * @returns {Promise}
+ */
+const getChallengePhase = (config, challengePhaseId, jwt = null) => {
+  return helper.reqToV5API(config, jwt, 'GET', `${config.CHALLENGE_API_URL}/challengePhases/${challengePhaseId}`)
+}
+
+/**
+ * Function to fully update challengePhase by id.
+ * @param {Object} config Configuration object
+ * @param {String} challengePhaseId the challengePhase id
+ * @param {Object} reqBody the request body object
+ * @param {String} jwt The JWT to authenticate the request
+ * @returns {Promise} updated challengePhase
+ */
+const updateChallengePhase = (config, challengePhaseId, reqBody, jwt = null) => {
+  return helper.reqToV5API(config, jwt, 'PUT', `${config.CHALLENGE_API_URL}/challengePhases/${challengePhaseId}`, reqBody)
+}
+
+/**
+ * Function to partially update challengePhase by id.
+ * @param {Object} config Configuration object
+ * @param {String} challengePhaseId the challengePhase id
+ * @param {Object} reqBody the request body object
+ * @param {String} jwt The JWT to authenticate the request
+ * @returns {Promise} updated challengePhase
+ */
+const patchChallengePhase = (config, challengePhaseId, reqBody, jwt = null) => {
+  return helper.reqToV5API(config, jwt, 'PATCH', `${config.CHALLENGE_API_URL}/challengePhases/${challengePhaseId}`, reqBody)
+}
+
+/**
+ * Function to delete the challengePhase by id.
+ * @param {Object} config Configuration object
+ * @param {String} challengePhaseId the challengePhase id
+ * @param {String} jwt The JWT to authenticate the request
+ * @returns {Promise}
+ */
+const deleteChallengePhase = (config, challengePhaseId, jwt = null) => {
+  return helper.reqToV5API(config, jwt, 'DELETE', `${config.CHALLENGE_API_URL}/challengePhases/${challengePhaseId}`)
+}
+
+module.exports = {
+  searchChallengePhases,
+  createChallengePhase,
+  getChallengePhase,
+  updateChallengePhase,
+  patchChallengePhase,
+  deleteChallengePhase
+}
diff --git a/src/ChallengeSettingsApi.js b/src/ChallengeSettingsApi.js
new file mode 100644
index 0000000..89df99a
--- /dev/null
+++ b/src/ChallengeSettingsApi.js
@@ -0,0 +1,58 @@
+/*
+ * Wrapper function for ChallengePhase related endpoints
+ */
+
+const helper = require('./common/helper')
+
+/**
+ * Function to search challengeSettings with pagination and filter
+ * @param {Object} config Configuration object
+ * @param {Object} reqQuery the query object
+ * @param {String} jwt The JWT to authenticate the request
+ * @returns {Promise} searched challengeSettings
+ */
+const searchChallengeSettings = (config, reqQuery, jwt = null) => {
+  const url = helper.buildURLwithParams(`${config.CHALLENGE_API_URL}/challengeSettings`, reqQuery)
+  return helper.reqToV5API(config, jwt, 'GET', url)
+}
+
+/**
+ * Function to create the challengeSetting.
+ * @param {Object} config Configuration object
+ * @param {Object} reqBody the request body object
+ * @param {String} jwt The JWT to authenticate the request
+ * @returns {Promise} created challengeSetting
+ */
+const createChallengeSetting = (config, reqBody, jwt = null) => {
+  return helper.reqToV5API(config, jwt, 'POST', `${config.CHALLENGE_API_URL}/challengeSettings`, reqBody)
+}
+
+/**
+ * Function to get the challengeSetting by id.
+ * @param {Object} config Configuration object
+ * @param {String} challengeTypeId the challengeSetting id
+ * @param {String} jwt The JWT to authenticate the request
+ * @returns {Promise}
+ */
+const getChallengeSetting = (config, challengeSettingId, jwt = null) => {
+  return helper.reqToV5API(config, jwt, 'GET', `${config.CHALLENGE_API_URL}/challengeSettings/${challengeSettingId}`)
+}
+
+/**
+ * Function to fully update challengeSetting by id.
+ * @param {Object} config Configuration object
+ * @param {String} challengeTypeId the challengeSetting id
+ * @param {Object} reqBody the request body object
+ * @param {String} jwt The JWT to authenticate the request
+ * @returns {Promise} updated challengeSetting
+ */
+const updateChallengeSetting = (config, challengeSettingId, reqBody, jwt = null) => {
+  return helper.reqToV5API(config, jwt, 'PUT', `${config.CHALLENGE_API_URL}/challengeSettings/${challengeSettingId}`, reqBody)
+}
+
+module.exports = {
+  searchChallengeSettings,
+  createChallengeSetting,
+  getChallengeSetting,
+  updateChallengeSetting
+}
diff --git a/test/ChallengePhasesApi.test.js b/test/ChallengePhasesApi.test.js
new file mode 100644
index 0000000..b6b93ff
--- /dev/null
+++ b/test/ChallengePhasesApi.test.js
@@ -0,0 +1,106 @@
+/*
+ * Test for ChallengePhasesApi.
+ */
+const wrapper = require('../index')
+const chai = require('chai')
+const testData = require('./common/testData')
+
+describe('ChallengePhases Api Test', async function () {
+  for (const [config, jwtToken, clientDescription] of [
+    [testData.ClientConfig.m2mClient, undefined, 'M2M'],
+    [testData.ClientConfig.userClient, undefined, 'user credentials'],
+    [testData.ClientConfig.jwtClient, testData.Token.JWT_TOKEN, 'JWT argument']
+  ]) {
+    const client = wrapper(config)
+    it(`searchChallengePhases with ${clientDescription} - success`, async function () {
+      const res = await client.searchChallengePhases(testData.RequestQuery.searchChallengePhases, jwtToken)
+      chai.expect(res.body).to.eql(testData.ResponseBody.searchChallengePhasesResponse)
+    })
+    it(`createChallengePhase with ${clientDescription} - success`, async function () {
+      const res = await client.createChallengePhase(testData.RequestBody.createChallengePhaseRequestBody, jwtToken)
+      chai.expect(res.body).to.eql(testData.ResponseBody.createChallengePhaseResponse)
+    })
+    it(`getChallengePhase with ${clientDescription} - success`, async function () {
+      const challengePhaseId = '10345'
+      const res = await client.getChallengePhase(challengePhaseId, jwtToken)
+      chai.expect(res.body).to.eql(testData.ResponseBody.getChallengePhaseResponse)
+    })
+    it(`updateChallengePhase with ${clientDescription} - success`, async function () {
+      const challengePhaseId = '10345'
+      const res = await client.updateChallengePhase(challengePhaseId, testData.RequestBody.updateChallengePhaseRequestBody, jwtToken)
+      chai.expect(res.body).to.eql(testData.ResponseBody.updateChallengePhaseResponse)
+    })
+    it(`patchChallengePhase with ${clientDescription} - success`, async function () {
+      const challengePhaseId = '10345'
+      const res = await client.patchChallengePhase(challengePhaseId, testData.RequestBody.patchChallengePhaseRequestBody, jwtToken)
+      chai.expect(res.body).to.eql(testData.ResponseBody.patchChallengePhaseResponse)
+    })
+    it(`deleteChallengePhase with ${clientDescription} - success`, async function () {
+      const challengePhaseId = '10345'
+      const res = await client.deleteChallengePhase(challengePhaseId, jwtToken)
+      chai.expect(res.body).to.eql(testData.ResponseBody.deleteChallengePhaseResponse)
+    })
+  }
+  for (const [config, jwtToken, clientDescription] of [
+    [Object.assign({}, testData.ClientConfig.m2mClient, { AUTH0_CLIENT_ID: 'invalid' }), undefined, 'invalid M2M client'],
+    [Object.assign({}, testData.ClientConfig.userClient, { USERNAME: 'invalid' }), undefined, 'invalid user credentials client'],
+    [testData.ClientConfig.jwtClient, 'invalid_token', 'invalid jwt client']
+  ]) {
+    const failClient = wrapper(config)
+    it(`searchChallengePhases with ${clientDescription} - failure`, async function () {
+      try {
+        await failClient.searchChallengePhases(testData.RequestQuery.searchChallengePhases, jwtToken)
+        throw Error('Test Fails')
+      } catch (err) {
+        chai.expect(err.message).to.not.equal('Test Fails')
+      }
+    })
+
+    it(`createChallengePhase with ${clientDescription} - failure`, async function () {
+      try {
+        await failClient.createChallengePhase(testData.RequestBody.createChallengePhaseRequestBody, jwtToken)
+        throw Error('Test Fails')
+      } catch (err) {
+        chai.expect(err.message).to.not.equal('Test Fails')
+      }
+    })
+
+    it(`getChallengePhase with ${clientDescription} - failure`, async function () {
+      const challengePhaseId = '10345'
+      try {
+        await failClient.getChallengePhase(challengePhaseId, jwtToken)
+        throw Error('Test Fails')
+      } catch (err) {
+        chai.expect(err.message).to.not.equal('Test Fails')
+      }
+    })
+
+    it(`updateChallengePhase with ${clientDescription} - failure`, async function () {
+      const challengePhaseId = '10345'
+      try {
+        await failClient.updateChallengePhase(challengePhaseId, testData.RequestBody.updateChallengePhaseRequestBody, jwtToken)
+        throw Error('Test Fails')
+      } catch (err) {
+        chai.expect(err.message).to.not.equal('Test Fails')
+      }
+    })
+    it(`patchChallengePhase with ${clientDescription} - failure`, async function () {
+      const challengePhaseId = '10345'
+      try {
+        await failClient.patchChallengePhase(challengePhaseId, testData.RequestBody.patchChallengePhaseRequestBody, jwtToken)
+        throw Error('Test Fails')
+      } catch (err) {
+        chai.expect(err.message).to.not.equal('Test Fails')
+      }
+    })
+    it(`deleteChallengePhase with ${clientDescription} - failure`, async function () {
+      const challengePhaseId = '10345'
+      try {
+        await failClient.deleteChallengePhase(challengePhaseId, jwtToken)
+        throw Error('Test Fails')
+      } catch (err) {
+        chai.expect(err.message).to.not.equal('Test Fails')
+      }
+    })
+  }
+})
diff --git a/test/ChallengeSettingsApi.test.js b/test/ChallengeSettingsApi.test.js
new file mode 100644
index 0000000..acd8458
--- /dev/null
+++ b/test/ChallengeSettingsApi.test.js
@@ -0,0 +1,77 @@
+/*
+ * Test for ChallengeSettingsApi.
+ */
+const wrapper = require('../index')
+const chai = require('chai')
+const testData = require('./common/testData')
+
+describe('ChallengeSettings Api Test', async function () {
+  for (const [config, jwtToken, clientDescription] of [
+    [testData.ClientConfig.m2mClient, undefined, 'M2M'],
+    [testData.ClientConfig.userClient, undefined, 'user credentials'],
+    [testData.ClientConfig.jwtClient, testData.Token.JWT_TOKEN, 'JWT argument']
+  ]) {
+    const client = wrapper(config)
+    it(`searchChallengeSettings with ${clientDescription} - success`, async function () {
+      const res = await client.searchChallengeSettings(testData.RequestQuery.searchChallengeSettings, jwtToken)
+      chai.expect(res.body).to.eql(testData.ResponseBody.searchChallengeSettingsResponse)
+    })
+    it(`createChallengeSetting with ${clientDescription} - success`, async function () {
+      const res = await client.createChallengeSetting(testData.RequestBody.createChallengeSettingRequestBody, jwtToken)
+      chai.expect(res.body).to.eql(testData.ResponseBody.createChallengeSettingResponse)
+    })
+    it(`getChallengeSetting with ${clientDescription} - success`, async function () {
+      const challengeSettingId = '10345'
+      const res = await client.getChallengeSetting(challengeSettingId, jwtToken)
+      chai.expect(res.body).to.eql(testData.ResponseBody.getChallengeSettingResponse)
+    })
+    it(`updateChallengeSetting with ${clientDescription} - success`, async function () {
+      const challengeSettingId = '10345'
+      const res = await client.updateChallengeSetting(challengeSettingId, testData.RequestBody.updateChallengeSettingRequestBody, jwtToken)
+      chai.expect(res.body).to.eql(testData.ResponseBody.updateChallengeSettingResponse)
+    })
+  }
+  for (const [config, jwtToken, clientDescription] of [
+    [Object.assign({}, testData.ClientConfig.m2mClient, { AUTH0_CLIENT_ID: 'invalid' }), undefined, 'invalid M2M client'],
+    [Object.assign({}, testData.ClientConfig.userClient, { USERNAME: 'invalid' }), undefined, 'invalid user credentials client'],
+    [testData.ClientConfig.jwtClient, 'invalid_token', 'invalid jwt client']
+  ]) {
+    const failClient = wrapper(config)
+    it(`searchChallengeSettings with ${clientDescription} - failure`, async function () {
+      try {
+        await failClient.searchChallengeSettings(testData.RequestQuery.searchChallengeSettings, jwtToken)
+        throw Error('Test Fails')
+      } catch (err) {
+        chai.expect(err.message).to.not.equal('Test Fails')
+      }
+    })
+
+    it(`createChallengeSetting with ${clientDescription} - failure`, async function () {
+      try {
+        await failClient.createChallengeSetting(testData.RequestBody.createChallengeSettingRequestBody, jwtToken)
+        throw Error('Test Fails')
+      } catch (err) {
+        chai.expect(err.message).to.not.equal('Test Fails')
+      }
+    })
+    it(`getChallengeSetting with ${clientDescription} - failure`, async function () {
+      const challengeSettingId = '10345'
+      try {
+        await failClient.getChallengeSetting(challengeSettingId, jwtToken)
+        throw Error('Test Fails')
+      } catch (err) {
+        chai.expect(err.message).to.not.equal('Test Fails')
+      }
+    })
+
+    it(`updateChallengeSetting with ${clientDescription} - failure`, async function () {
+      const challengeSettingId = '10345'
+      try {
+        await failClient.updateChallengeSetting(challengeSettingId, testData.RequestBody.updateChallengeSettingRequestBody, jwtToken)
+        throw Error('Test Fails')
+      } catch (err) {
+        chai.expect(err.message).to.not.equal('Test Fails')
+      }
+    })
+  }
+})
diff --git a/test/common/createChallengePhaseRequestBody.json b/test/common/createChallengePhaseRequestBody.json
new file mode 100644
index 0000000..2ce4cb4
--- /dev/null
+++ b/test/common/createChallengePhaseRequestBody.json
@@ -0,0 +1,7 @@
+{
+  "name": "Registration",
+  "description": "registration phase",
+  "predecessor": "a1532a8c-f385-44ed-936d-2d408ee5d22c",
+  "isActive": true,
+  "duration": 120000
+}
\ No newline at end of file
diff --git a/test/common/createChallengePhaseResponse.json b/test/common/createChallengePhaseResponse.json
new file mode 100644
index 0000000..e237fbc
--- /dev/null
+++ b/test/common/createChallengePhaseResponse.json
@@ -0,0 +1,8 @@
+{
+  "id": "60e15bda-f5c4-4c10-8672-495c1b213484",
+  "name": "registration",
+  "description": "registration phase",
+  "predecessor": "a1532a8c-f385-44ed-936d-2d408ee5d22c",
+  "isActive": true,
+  "duration": 120000
+}
\ No newline at end of file
diff --git a/test/common/testData.js b/test/common/testData.js
index f1cd103..03ed201 100644
--- a/test/common/testData.js
+++ b/test/common/testData.js
@@ -46,6 +46,29 @@ const createChallengeTypeResponse = require('./createChallengeTypeResponse.json'
 const updateChallengeTypeResponse = require('./updateChallengeTypeResponse.json')
 const patchChallengeTypeResponse = require('./patchChallengeTypeResponse.json')
 
+// challengeSettingsApi
+const createChallengeSettingRequestBody = { name: 'challenge-setting-name' }
+const updateChallengeSettingRequestBody = { name: 'challenge-setting-name-update' }
+
+const createChallengeSettingResponse = Object.assign({}, createChallengeSettingRequestBody, {
+  id: '9c5f6840-219b-45c4-8826-ff18fa012346'
+})
+const getChallengeSettingResponse = createChallengeSettingResponse
+const updateChallengeSettingResponse = Object.assign({}, getChallengeSettingResponse, updateChallengeSettingRequestBody)
+const searchChallengeSettingsResponse = [getChallengeSettingResponse]
+
+// challengePhasesApi
+const createChallengePhaseRequestBody = require('./createChallengePhaseRequestBody.json')
+const updateChallengePhaseRequestBody = Object.assign({}, createChallengePhaseRequestBody, { name: 'review' })
+const patchChallengePhaseRequestBody = { isActive: false }
+
+const createChallengePhaseResponse = require('./createChallengePhaseResponse.json')
+const getChallengePhaseResponse = createChallengePhaseResponse
+const searchChallengePhasesResponse = [createChallengePhaseResponse]
+const updateChallengePhaseResponse = Object.assign({}, createChallengePhaseResponse, updateChallengePhaseRequestBody)
+const patchChallengePhaseResponse = Object.assign({}, createChallengePhaseResponse, patchChallengePhaseRequestBody)
+const deleteChallengePhaseResponse = createChallengePhaseResponse
+
 module.exports = {
   Url: {
     CHALLENGE_API_URL
@@ -87,7 +110,12 @@ module.exports = {
     patchChallengeRequestBody,
     createChallengeTypeRequestBody,
     updateChallengeTypeRequestBody,
-    patchChallengeTypeRequestBody
+    patchChallengeTypeRequestBody,
+    createChallengeSettingRequestBody,
+    updateChallengeSettingRequestBody,
+    createChallengePhaseRequestBody,
+    updateChallengePhaseRequestBody,
+    patchChallengePhaseRequestBody
   },
   ResponseBody: {
     Authv2: {
@@ -118,7 +146,17 @@ module.exports = {
     getChallengeTypeResponse,
     createChallengeTypeResponse,
     updateChallengeTypeResponse,
-    patchChallengeTypeResponse
+    patchChallengeTypeResponse,
+    createChallengeSettingResponse,
+    searchChallengeSettingsResponse,
+    getChallengeSettingResponse,
+    updateChallengeSettingResponse,
+    createChallengePhaseResponse,
+    getChallengePhaseResponse,
+    searchChallengePhasesResponse,
+    updateChallengePhaseResponse,
+    patchChallengePhaseResponse,
+    deleteChallengePhaseResponse
   },
   RequestQuery: {
     searchChallenges: {
@@ -145,6 +183,16 @@ module.exports = {
       name: 'Code',
       description: 'Code',
       isActive: true
+    },
+    searchChallengeSettings: {
+      page: 1,
+      perPage: 10,
+      name: 'Code'
+    },
+    searchChallengePhases: {
+      page: 1,
+      perPage: 10,
+      name: 'Registration'
     }
   }
 }
diff --git a/test/prepare.js b/test/prepare.js
index 961ab08..33c3979 100644
--- a/test/prepare.js
+++ b/test/prepare.js
@@ -93,6 +93,76 @@ prepare(function (done) {
       }
       return [200, testData.ResponseBody.patchChallengeTypeResponse]
     })
+    .get(/\/challengeSettings\/.*/)
+    .reply(function (_uri, _requestBody) {
+      if (this.req.headers.authorization === 'Bearer invalid_token') {
+        return [400, { message: 'Unkown Error' }]
+      }
+      return [200, testData.ResponseBody.getChallengeSettingResponse]
+    })
+    .get(/\/challengeSettings.*/)
+    .reply(function (_uri, _requestBody) {
+      if (this.req.headers.authorization === 'Bearer invalid_token') {
+        return [400, { message: 'Unkown Error' }]
+      }
+      return [200, testData.ResponseBody.searchChallengeSettingsResponse]
+    })
+    .post('/challengeSettings')
+    .reply(function (_uri, _requestBody) {
+      if (this.req.headers.authorization === 'Bearer invalid_token') {
+        return [400, { message: 'Unkown Error' }]
+      }
+      return [200, testData.ResponseBody.createChallengeSettingResponse]
+    })
+    .put(/\/challengeSettings\/.+/)
+    .reply(function (_uri, _requestBody) {
+      if (this.req.headers.authorization === 'Bearer invalid_token') {
+        return [400, { message: 'Unkown Error' }]
+      }
+      return [200, testData.ResponseBody.updateChallengeSettingResponse]
+    })
+    .get(/\/challengePhases\/.*/)
+    .reply(function (_uri, _requestBody) {
+      if (this.req.headers.authorization === 'Bearer invalid_token') {
+        return [400, { message: 'Unkown Error' }]
+      }
+      return [200, testData.ResponseBody.getChallengePhaseResponse]
+    })
+    .get(/\/challengePhases.*/)
+    .reply(function (_uri, _requestBody) {
+      if (this.req.headers.authorization === 'Bearer invalid_token') {
+        return [400, { message: 'Unkown Error' }]
+      }
+      return [200, testData.ResponseBody.searchChallengePhasesResponse]
+    })
+    .post('/challengePhases')
+    .reply(function (_uri, _requestBody) {
+      if (this.req.headers.authorization === 'Bearer invalid_token') {
+        return [400, { message: 'Unkown Error' }]
+      }
+      return [200, testData.ResponseBody.createChallengePhaseResponse]
+    })
+    .put(/\/challengePhases\/.+/)
+    .reply(function (_uri, _requestBody) {
+      if (this.req.headers.authorization === 'Bearer invalid_token') {
+        return [400, { message: 'Unkown Error' }]
+      }
+      return [200, testData.ResponseBody.updateChallengePhaseResponse]
+    })
+    .patch(/\/challengePhases\/.+/)
+    .reply(function (_uri, _requestBody) {
+      if (this.req.headers.authorization === 'Bearer invalid_token') {
+        return [400, { message: 'Unkown Error' }]
+      }
+      return [200, testData.ResponseBody.patchChallengePhaseResponse]
+    })
+    .delete(/\/challengePhases\/.+/)
+    .reply(function (_uri, _requestBody) {
+      if (this.req.headers.authorization === 'Bearer invalid_token') {
+        return [400, { message: 'Unkown Error' }]
+      }
+      return [200, testData.ResponseBody.deleteChallengePhaseResponse]
+    })
   done()
 }, function (done) {
   done()
